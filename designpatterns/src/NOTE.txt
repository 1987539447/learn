#工厂方法模式（Factory Method）
单一方法--多方法--静态多方法
#抽象工厂模式（Abstract Factory）
不同的对象使用不同的工厂，工厂实现同一接口；易于扩展，有变化时只需增加对象接口实现类和工厂实现类
#单例模式-singleton：保证对象实例的唯一性，满足多线程情况下的唯一
#建造者模式-builder
工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，
所谓复合对象就是指某个类具有不同的属性
#原型模式-Prototype
以类为原型，通过clone实现对象实例的创建
#适配器模式-Adapter
类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。
对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。
接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。
#装饰器模式-Decorator
对象适配器模式的延伸，调用原对象方法，并做其他额外操作
#代理模式-Proxy
装饰器模式延伸，代理类调用原有的方法，且对产生的结果进行控制
#外观模式-Facade
外观模式决类与类之间的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，
而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度
#桥接模式-Bridge
桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化
#组合模式-Composite
组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便.
#享元模式-FlyWeight
实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用,工厂负责创建和管理享元单元
